Question
    Given an array of integers nums and an integer target, return indices of the two
    numbers such that they add up to target.

    You may assume that each input would have exactly one solution, and you may
    not use the same element twice.

    You can return the answer in any order.

    Constraints:
        - 2 <= nums.length <= 10^3
        - -10^9 <= nums[i] <= 10^9
        - -10^9 <= target <= 10^9
        - Only one valid answer exists.
------------------------------------------------------

Thoughts Before Coding - 
    - The brute force approach
        - We will perform a nested 'for' loop
            - For each of the element 'x'
                - We will want to perform another 'for' loop to find 'y', where  y = target - x
        - This approach will cost O(n^2) time complexity -- See notebook for full analysis
        
    - The Optimized approach
        - For each of the element 'x'
            - We will want to check if 'target - x' exists
        - We will want a way to save the previous element we have seen before
            - We should note that we need to return the indices of the two numbers
            - This means we need to keep track of element and index
                - We can create a HashMap to map 'element -> index'
        - For each of the element 'x'
            - We can check our HashMap for 'target - x'
    - This approach will allow us to reduce the time complexity to O(n) as we will eliminate inner for loop

Answer
    - Create a HashMap 'map' to keep track of element and index
    - Iterate through the indices of the input array 'nums', denoted as 'i'
        - If 'map' contains 'target - nums[i]'
            - Return { i, map.get(target - nums[i] }//array containing the indices
        - Put 'nums[i]' and 'i' into 'map'//if the if condn is false 
    - Return an empty array as no such pair found

What is the Time and Space Complexity?
    - Time Complexity = O(n), where n is the length of the input array
        - O(n), visit each index once
    - Space Complexity = O(n), where n is the length of the input array
        - O(n), map





